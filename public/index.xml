<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andrew Attilio</title>
    <link>/</link>
    <description>Recent content on Andrew Attilio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2023 Andrew Attilio</copyright>
    <lastBuildDate>Sat, 11 Nov 2023 14:10:55 -0700</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Group Anagrams --- Solution and Analysis</title>
      <link>/dsa/group-anagrams/</link>
      <pubDate>Sat, 11 Nov 2023 14:10:55 -0700</pubDate>
      
      <guid>/dsa/group-anagrams/</guid>
      <description>The Challenge Given an array of strings strs, group the anagrams together. You can return the answer in any order.
An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
Example 1: Input: strs = [&amp;#34;eat&amp;#34;,&amp;#34;tea&amp;#34;,&amp;#34;tan&amp;#34;,&amp;#34;ate&amp;#34;,&amp;#34;nat&amp;#34;,&amp;#34;bat&amp;#34;] Output: [[&amp;#34;bat&amp;#34;],[&amp;#34;nat&amp;#34;,&amp;#34;tan&amp;#34;],[&amp;#34;ate&amp;#34;,&amp;#34;eat&amp;#34;,&amp;#34;tea&amp;#34;]] Example 2: Input: strs = [&amp;#34;&amp;#34;] Output: [[&amp;#34;&amp;#34;]] Solution We start by creating a dictionary that maps a collection of letters to all of the words in the list that match as anagrams.</description>
      <content>&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Given an array of strings strs, group the anagrams together. You can return the answer in any order.&lt;/p&gt;
&lt;p&gt;An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Example 1:
Input: strs = [&amp;#34;eat&amp;#34;,&amp;#34;tea&amp;#34;,&amp;#34;tan&amp;#34;,&amp;#34;ate&amp;#34;,&amp;#34;nat&amp;#34;,&amp;#34;bat&amp;#34;]
Output: [[&amp;#34;bat&amp;#34;],[&amp;#34;nat&amp;#34;,&amp;#34;tan&amp;#34;],[&amp;#34;ate&amp;#34;,&amp;#34;eat&amp;#34;,&amp;#34;tea&amp;#34;]]

Example 2:
Input: strs = [&amp;#34;&amp;#34;]
Output: [[&amp;#34;&amp;#34;]]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;
&lt;p&gt;We start by creating a dictionary that maps a collection of letters to all of the words in the list that match as anagrams. We iterate through each word in the list and sort it. Then, we append that word to the list value for the key that matches the sorted version for the word.&lt;/p&gt;
&lt;p&gt;To finish, we return a list of the values in our map.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Solution(object):
def groupAnagrams(self, strs):
    sorted_map = defaultdict(list)

    for word in strs:
        sorted_word = &amp;#39;&amp;#39;.join(sorted(word))
        sorted_map[sorted_word].append(word)

    return list(sorted_map.values())
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>A Jelly Bean Probablity Model</title>
      <link>/math-models/jelly-beans/</link>
      <pubDate>Thu, 09 Nov 2023 14:10:55 -0700</pubDate>
      
      <guid>/math-models/jelly-beans/</guid>
      <description>Jelly Bean Probability In this problem, we are exploring the most probable outcome after a jelly bean experiment. The experiment proceeds as follows:
  Stir together 2023 red jelly beans and 2023 green jelly beans.
  Pull 3 jelly beans out of the jar at a time.
  If they are all the same color, eat all 3 jelly beans.
  If there are 2 of one color, eat 1 of the majority color and put the other 2 jelly beans back in the jar.</description>
      <content>&lt;h2 id=&#34;jelly-bean-probability&#34;&gt;Jelly Bean Probability&lt;/h2&gt;
&lt;p&gt;In this problem, we are exploring the most probable outcome
after a jelly bean experiment. The experiment proceeds as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Stir together 2023 red jelly beans and 2023 green jelly beans.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pull 3 jelly beans out of the jar at a time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If they are all the same color, eat all 3 jelly beans.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If there are 2 of one color, eat 1 of the majority color and put the
other 2 jelly beans back in the jar.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After following this process, there are 4 distinct ways for the
experiment to end:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;No beans.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One bean (either color is equally probable).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two beans of the same color (either color is equally probable).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One red and one green.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;Calculating the probabilities of hundreds of consecutive
draws seemed impossibly complicated, so I coded a Python program that
simulates the stated problem, drawing three beans at a time until no
more than 2 remain.&lt;/p&gt;
&lt;p&gt;The code for my &lt;code&gt;bean_jar_experiment()&lt;/code&gt; function is listed below. There
are two global variables, &lt;code&gt;red_count&lt;/code&gt; and &lt;code&gt;green_count&lt;/code&gt;. The
&lt;code&gt;bean_jar_experiment()&lt;/code&gt; continuously calls the &lt;code&gt;draw_beans&lt;/code&gt; function
until there are 2 or less beans left in the virtual jar. Each instance
of &lt;code&gt;draw_beans&lt;/code&gt; generates three random numbers, each of which
corresponds to either a red or green bean. Depending on the results of
the 3 randomly-generated beans, the function subtracts the proper amount
of beans from &lt;code&gt;red_count&lt;/code&gt; or &lt;code&gt;green_count&lt;/code&gt;, simulating consumption of
those beans. The &lt;code&gt;draw_count&lt;/code&gt; is initialized to 0, and I simulated each
red bean as $-1$ for the &lt;code&gt;draw_count&lt;/code&gt; and each green bean as $+1$. For
example, the following line represents consuming three red beans, given
that the &lt;code&gt;draw_count&lt;/code&gt; is equal to -3:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    case (-3): # all red
            red_count -= 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The following is the full code for the program:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;red_count = 2023    
green_count = 2023

def bean_jar_experiment():  
    while (red_count + green_count) &amp;gt; 2:
        draw_beans(red_count, green_count)

    print(&amp;#39;Red: &amp;#39;, red_count)
    print(&amp;#39;Green: &amp;#39;, green_count)

def draw_beans(red, green):
    global red_count
    global green_count

    draw_count = 0 # if &amp;lt; 0: red, if &amp;gt; 0: green
    for i in range(3):
        random_int = randint(1, (red + green))
        if random_int &amp;lt;= red:
            draw_count -= 1
        else: 
            draw_count += 1
    match draw_count:
        case (-3): # all red
            red_count -= 3
        case (-1): # 2 red, 1 green
            red_count -= 1
        case (1): # 2 green, 1 red
            green_count -= 1
        case (3): # all green
            green_count -= 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Great, but this would be most useful by running the program hundreds,
thousands, or millions of times and collecting all of the results. Let&amp;rsquo;s
do that.&lt;/p&gt;
&lt;p&gt;I created a dictionary for the program that stores the results of each
occurrence of the &lt;code&gt;bean_jar_experiment&lt;/code&gt; function. The mappings are based
on the 4 cases ${a, b, c, d}$ defined in the intro section of this
paper. The initial dictionary is:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    results = {&amp;#39;a&amp;#39;: 0, &amp;#39;b&amp;#39;: 0, &amp;#39;c&amp;#39;: 0, &amp;#39;d&amp;#39;: 0}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Each time the program runs, it will add 1 to the corresponding case
result. I ran the program 1000 times, then 10000 times, then 100000
times. Here are the results:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    RESULTS FROM 10000 EXPERIMENTS
    {&amp;#39;a&amp;#39;: 1057, &amp;#39;b&amp;#39;: 3335, &amp;#39;c&amp;#39;: 2885, &amp;#39;d&amp;#39;: 2723}
    Runtime: 72.10 seconds

    RESULTS FROM 100000 EXPERIMENTS:
    {&amp;#39;a&amp;#39;: 10258, &amp;#39;b&amp;#39;: 33810, &amp;#39;c&amp;#39;: 28834, &amp;#39;d&amp;#39;: 27098}
    Runtime: 754.85 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The results are consistent. According to the Python program, &lt;strong&gt;case 2
is most likely to occur&lt;/strong&gt;, which corresponds to ending with either one
green or one red bean in the jar. &lt;strong&gt;Case 1 is the least likely
outcome&lt;/strong&gt;, which is the case in which we end with no beans.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s consider the data from running the experiment 100000 times. The
probabilities of each case are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;No beans = &lt;strong&gt;10.3%&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One bean = &lt;strong&gt;33.8%&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Two beans of the same color = &lt;strong&gt;28.8%&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;One red and one green = &lt;strong&gt;27.1%&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    </item>
    
    <item>
      <title>About</title>
      <link>/posts/problem-solving-methods/</link>
      <pubDate>Thu, 09 Nov 2023 14:10:55 -0700</pubDate>
      
      <guid>/posts/problem-solving-methods/</guid>
      <description>Testing This is a test.</description>
      <content>&lt;h1 id=&#34;testing&#34;&gt;Testing&lt;/h1&gt;
&lt;p&gt;This is a test.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Contains Duplicate --- Solution and Analysis</title>
      <link>/dsa/contains-duplicate/</link>
      <pubDate>Thu, 09 Nov 2023 14:10:55 -0700</pubDate>
      
      <guid>/dsa/contains-duplicate/</guid>
      <description>The Challenge Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.
Example 1: Input: nums = [1,2,3,1] Output: true Example 2: Input: nums = [1,2,3,4] Output: false Example 3: Input: nums = [1,1,1,3,3,4,3,2,4,2] Output: true Solution This is a rather simple problem to solve in O(n) time. First, we create a set that tracks the numbers we have seen.</description>
      <content>&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Example 1:

Input: nums = [1,2,3,1]
Output: true

Example 2:

Input: nums = [1,2,3,4]
Output: false

Example 3:

Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;
&lt;p&gt;This is a rather simple problem to solve in O(n) time. First, we create a set that tracks the numbers we have seen. For each number in the list, we check it against the list. If its in the list, we found a duplicate. If not, we add it to the seen set and continue iterating.&lt;/p&gt;
&lt;p&gt;If we make it all the way through, we return False.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Solution(object):
def containsDuplicate(self, nums):
    has_appeared = set()
    for i in nums:
        if i in has_appeared:
            return True
        has_appeared.add(i)
    return False
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>Reverse Linked List --- Solution and Analysis</title>
      <link>/dsa/reverse-linked-list/</link>
      <pubDate>Thu, 09 Nov 2023 14:10:55 -0700</pubDate>
      
      <guid>/dsa/reverse-linked-list/</guid>
      <description>The Challenge Given the head of a singly linked list, reverse the list, and return the reversed list.
# Definition for singly-linked list. # class ListNode(object): # def __init__(self, val=0, next=None): # self.val = val # self.next = next Some built-in Node functions are defined in the comments. When the head is passed in, it is pointing to the next node in the list, and so on. The end of the list is reached when a node&amp;rsquo;s next value is None/NULL.</description>
      <content>&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Given the head of a singly linked list, reverse the list, and return the reversed list.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Some built-in Node functions are defined in the comments. When the head is passed in, it is pointing to the next node in the list, and so on. The end of the list is reached when a node&amp;rsquo;s next value is None/NULL. Therefore, we set the prev node to NULL initially, so that when we reverse-engineer, the head will be the new end of the list.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;We keep track of the current node, starting with the head. While the current head != None (in other words, while we haven&amp;rsquo;t passed the end of the list), we make next a temporary pointer to the current&amp;rsquo;s next. Then, with current.next freed up by the temp pointer, we point current.next to the prev node. In the case of head, it is now pointing to NULL. Then, we change prev to the current node (so, in case 1, the head is now the previous node). Finally, we move our current node to the next in the list.&lt;/p&gt;
&lt;p&gt;Once current passes the last node and reaches NULL, we return that last node (which is now pointed to by prev). This returns a reversed list, where the originally-last node is now the head, and each &amp;rsquo;next&amp;rsquo; is pointing &amp;lsquo;backwards&amp;rsquo; in regards to the original list.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Solution(object):
    def reverseList(self, head):
        prev = None
        current = head
        while current != None:
            next = current.next
            current.next = prev
            prev = current
            current = next
        return prev
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>Two Sum --- Solution and Analysis</title>
      <link>/dsa/two-sum/</link>
      <pubDate>Thu, 09 Nov 2023 14:10:55 -0700</pubDate>
      
      <guid>/dsa/two-sum/</guid>
      <description>The Challenge Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
Solution The naive approach is nested for loops, where we iterate through each element i and compare it to each element j.</description>
      <content>&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.&lt;/p&gt;
&lt;p&gt;You may assume that each input would have exactly one solution, and you may not use the same element twice.&lt;/p&gt;
&lt;p&gt;You can return the answer in any order.&lt;/p&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;p&gt;The naive approach is nested for loops, where we iterate through each element &lt;code&gt;i&lt;/code&gt; and compare it to each element &lt;code&gt;j&lt;/code&gt;. This has a time complexity of O(n^2) due to iterating through nums n*n times.&lt;/p&gt;
&lt;p&gt;An objectively better approach is to utilize a hash map. We can iterate through the list only once, checking if the current number has a complementary number in the hash_table that adds to the target. If they do, we return a list with the two indices. If not, we add &lt;code&gt;nums[i]&lt;/code&gt; to the hash table and continue iterating. This approach has a time complexity of O(n) because we iterate through the list only once.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Solution(object):
def twoSum(self, nums, target):
    hash_table = {}

    for i in range(len(nums)):
        if target - nums[i] in hash_table:
            return [hash_table[target-nums[i]], i]
        hash_table[nums[i]] = i

    return [] # no matches
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title>Valid Parantheses --- Solution and Analysis</title>
      <link>/dsa/valid-parantheses/</link>
      <pubDate>Tue, 24 Oct 2023 14:10:55 -0700</pubDate>
      
      <guid>/dsa/valid-parantheses/</guid>
      <description>The Challenge Given a string s containing just the characters &amp;lsquo;(&amp;rsquo;, &amp;lsquo;)&amp;rsquo;, &amp;lsquo;{&amp;rsquo;, &amp;lsquo;}&amp;rsquo;, &amp;lsquo;[&amp;rsquo; and &amp;lsquo;]&amp;rsquo;, determine if the input string is valid.
An input string is valid if:
 Open brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every close bracket has a corresponding open bracket of the same type.  Solution class Solution(object): def isValid(self, s): stack = [] pairs = { &amp;#39;(&amp;#39;: &amp;#39;)&amp;#39;, &amp;#39;{&amp;#39;: &amp;#39;}&amp;#39;, &amp;#39;[&amp;#39;: &amp;#39;]&amp;#39; } for bracket in s: if bracket in pairs: stack.</description>
      <content>&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;
&lt;p&gt;Given a string s containing just the characters &amp;lsquo;(&amp;rsquo;, &amp;lsquo;)&amp;rsquo;, &amp;lsquo;{&amp;rsquo;, &amp;lsquo;}&amp;rsquo;, &amp;lsquo;[&amp;rsquo; and &amp;lsquo;]&amp;rsquo;, determine if the input string is valid.&lt;/p&gt;
&lt;p&gt;An input string is valid if:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open brackets must be closed by the same type of brackets.&lt;/li&gt;
&lt;li&gt;Open brackets must be closed in the correct order.&lt;/li&gt;
&lt;li&gt;Every close bracket has a corresponding open bracket of the same type.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Solution(object):
    def isValid(self, s):
        stack = []
        pairs = {
            &amp;#39;(&amp;#39;: &amp;#39;)&amp;#39;,
            &amp;#39;{&amp;#39;: &amp;#39;}&amp;#39;,
            &amp;#39;[&amp;#39;: &amp;#39;]&amp;#39;
        }

        for bracket in s:
            if bracket in pairs:
                stack.append(bracket)
            elif len(stack) == 0 or bracket != pairs[stack.pop()]:
                return False

        return len(stack) == 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is a clear-cut problem where a stack is an intuitive solution. We initialize an empty stack and iterate through the list of brackets. If it is a left bracket, denoted by it being a key in the dictionary, then we append to the stack.&lt;/p&gt;
&lt;p&gt;If it is not a left, then it must be a right bracket. Therefore, we check if the stack is empty (which makes this an invalid bracket) or if the bracket in question pairs does &lt;em&gt;not&lt;/em&gt; pair with the most recent bracket on the stack (which we pop off simultaneously).&lt;/p&gt;
&lt;p&gt;If we get to the end and the stack is empty, the return statement will be True. Otherwise, it will be False.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
    <item>
      <title></title>
      <link>/projects/ereader-sim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/ereader-sim/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title></title>
      <link>/projects/math-models/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/math-models/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>Flavor Pairings Web App</title>
      <link>/projects/flavor-pairings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/flavor-pairings/</guid>
      <description>A project&amp;hellip;
The Code ohfoidaf</description>
      <content>&lt;p&gt;A project&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;the-code&#34;&gt;The Code&lt;/h2&gt;
&lt;p&gt;ohfoidaf&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
